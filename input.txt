##
#
# Comments are supported and are prefixed with a leading '#'.
#
####
#
#
# The general form of our test definitions is:
#
#  TARGET must run PROTOCOL [test-specific options]
#
# So if you wish to test that a host is running ftp you'd write:
#
#  ftp.example.com must run ftp
#
# When it comes to running HTTP/HTTPS tests the target must be an URL,
# and success is determined by the HTTP status-code.  Additional options
# allow you to specify what you regard as a failure - such as a 301/302
# status-code, and some text in the response-body.
#

#
# My website is at https://steve.fi/, there are redirections
# in place for HTTP and for www-prefixed access.
#
# Test that the HTTP versions redirect to the secure version.
#
# We look for redirections via:
#
#   1.  The status-code.
#
#   2.  The URL of the target in the body (which Apache does automatically).
#
#
http://steve.fi/ must run http with status 301 with content 'https://steve.fi'
http://www.steve.fi/ must run http with status 302 with content 'https://steve.fi'

#
# We don't like www. round here.
#
https://www.steve.fi/ must run http with status 302 with content 'https://steve.fi'

#
# So the final test is that we have decent content on the single "real" site.
#
https://steve.fi/ must run http with status 200 with content 'Steve Kemp'


#
# Of course nobody can reach my website without a DNS-server replying
# with suitable responses.
#
# Here we define a pair of nameservers, using the macro-facility:
#
NAMESERVERS are rachel.ns.cloudflare.com, clark.ns.cloudflare.com

#
# Now we use that macro, meaning that these tests will be applied
# against each host in the list.
#
# Macros are basically just shortcuts for repeating tests against
# multiple hosts.
#
NAMESERVERS must run dns for steve.fi resolving A as '176.9.183.100'
NAMESERVERS must run dns for steve.fi resolving AAAA as '2a01:4f8:151:6083::100'

#
# You can confirm that a record shouldn't exist by looking for a result
# of ''.
#
# For example the following host I setup as IPv4 only, so an AAAA record
# would be a mistake:
#
NAMESERVERS must run dns for alert.steve.fi resolving A    as '176.9.183.100'
NAMESERVERS must run dns for alert.steve.fi resolving AAAA as ''


#
# Now we should do more testing!
#
# Test any OpenSSH probe against localhost, on the non-standard port 2222.
#
localhost must run ssh on port 2222

#
# If you didn't want to use a non-standard port you'd just write:
#
#    localhost must run ssh
#

#
# Redis should run on localhost.
#
localhost must run redis

#
# If a password is required to connect to redis then set it like so:
#
#    localhost must run redis with password 'secrit!'
#
# If a non-standard port is used:
#
#    localhost must run redis on port 1234
#
# Of course these can be combined:
#
#    localhost must run redis on port 1234 with password 'p4ssw0rd'
#

#
# Now we can test that we get a response from a remote SMTP server
#
mail.steve.org.uk must run smtp
mail.steve.org.uk must run smtp on 587


#
# Macros allow you to cut down on duplication if you want to run the
# same test against a group of hosts.
#
# We've already seen that with the nameserver tests previously, but
# it doesn't hurt to have a refresher.
#
REDIS are 127.0.0.1, ::1
REDIS must run redis

#
# Similarly you might wish to test SSH against a whole bunch of related
# hosts, so you might try this:
#
#   SSH_HOSTS are host1.example.com, host2.example.com, host3.example.com
#   SSH_HOSTS must run ssh
#
# NOTE:
#
#    All of the protocol-tests allow this expansion __EXCEPT__ for
#    the http-test, because the target of a HTTP-test is an URL, not a host.
#



#
# IMAPS is a good thing.
#
# In this context "insecure" means "don't validate the SSL certificate",
# this fails because we connect by IP address..
#
mail.steve.org.uk must run imaps insecure


#
# This concludes our testing.
#
