#!/bin/bash
set -e
DIR="$(dirname "$(command -v greadlink >/dev/null 2>&1 && greadlink -f "$0" || readlink -f "$0")")"

# The basename of our binary
BASE="overseer"

OUT_DIR="$DIR/../bin"
mkdir -p "$OUT_DIR"

#
# We build on multiple platforms/archs
#
BUILD_PLATFORMS="linux windows darwin freebsd arm64"
BUILD_ARCHS="amd64 386"

# For each platform
for OS in ${BUILD_PLATFORMS[@]}; do

  # For each arch
  for ARCH in ${BUILD_ARCHS[@]}; do

    # Setup a suffix for the binary
    SUFFIX="${OS}"

    # i386 is better than 386
    if [ "$ARCH" = "386" ]; then
      SUFFIX="${SUFFIX}-i386"
    else
      SUFFIX="${SUFFIX}-${ARCH}"
    fi

    # Windows binaries should end in .EXE
    if [ "$OS" = "windows" ]; then
      SUFFIX="${SUFFIX}.exe"
    fi

    echo "Building for ${OS} [${ARCH}] -> ${BASE}-${SUFFIX}"

    # Run the build
    export GOARCH=${ARCH}
    export GOOS=${OS}
    export CGO_ENABLED=0

    # hack for ARM
    if [ "${GOOS}" = "arm64" ]; then
      export GOOS=""
      export GOARCH=arm64
      export GOARM=7
      SUFFIX="arm64"
    fi

    # Build the main-binary
    go build -ldflags "-X main.version=$(git describe --tags 2>/dev/null || echo 'master')" -o "${OUT_DIR}/${BASE}-${SUFFIX}" "$DIR/.."

    # Build each bridge
    for br in ${DIR}/../bridges/*/; do

      bridge=$(basename $br)

      # Build the bridge I use
      go build -o "${OUT_DIR}/${bridge}-${SUFFIX}" "${br}"

    done
  done
done
